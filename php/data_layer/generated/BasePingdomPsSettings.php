<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
abstract class BasePingdomPsSettings extends Doctrine_Record
{

  public function setTableDefinition()
  {
    $this->setTableName('pingdom_ps_settings');
    $this->hasColumn('id as id', 'integer', 4, array('alltypes' =>  array(  0 => 'integer', ), 'ntype' => 'int(10) unsigned', 'unsigned' => 1, 'values' =>  array(), 'primary' => true, 'notnull' => true, 'autoincrement' => true));
    $this->hasColumn('username as username', 'string', 255, array('alltypes' =>  array(  0 => 'string', ), 'ntype' => 'varchar(255)', 'fixed' => false, 'values' =>  array(), 'primary' => false, 'notnull' => true, 'autoincrement' => false));
    $this->hasColumn('password as password', 'string', 255, array('alltypes' =>  array(  0 => 'string', ), 'ntype' => 'varchar(255)', 'fixed' => false, 'values' =>  array(), 'primary' => false, 'notnull' => true, 'autoincrement' => false));
    $this->hasColumn('pingdom_api_key as pingdom_api_key', 'string', 255, array('alltypes' =>  array(  0 => 'string', ), 'ntype' => 'varchar(255)', 'fixed' => false, 'values' =>  array(), 'primary' => false, 'notnull' => true, 'autoincrement' => false));
    $this->hasColumn('next_sensors_sync_time as next_sensors_sync_time', 'integer', null, array('alltypes' =>  array(  0 => 'integer', ), 'ntype' => 'int(10) unsigned', 'values' =>  array(), 'primary' => false, 'notnull' => true, 'autoincrement' => false));
    $this->hasColumn('minimum_downtime_period as minimum_downtime_period', 'integer', 4, array('alltypes' =>  array(  0 => 'integer', ), 'ntype' => 'int(10) unsigned', 'unsigned' => 1, 'values' =>  array(), 'primary' => false, 'notnull' => true, 'autoincrement' => false));
    $this->hasColumn('ip_resolving_period as ip_resolving_period', 'integer', 4, array('alltypes' =>  array(  0 => 'integer', ), 'ntype' => 'int(10) unsigned', 'unsigned' => 1, 'values' =>  array(), 'primary' => false, 'notnull' => true, 'autoincrement' => false));
    $this->hasColumn('sensors_sync_period as sensors_sync_period', 'integer', 4, array('alltypes' =>  array(  0 => 'integer', ), 'ntype' => 'int(10) unsigned', 'unsigned' => 1, 'values' =>  array(), 'primary' => false, 'notnull' => true, 'autoincrement' => false));
    $this->hasColumn('state_update_period as state_update_period', 'integer', 4, array('alltypes' =>  array(  0 => 'integer', ), 'ntype' => 'int(10) unsigned', 'unsigned' => 1, 'values' =>  array(), 'primary' => false, 'notnull' => true, 'autoincrement' => false));
  }


}